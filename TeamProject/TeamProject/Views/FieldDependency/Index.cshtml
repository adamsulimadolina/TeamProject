
@model CreateDependencyDTO
@{
    ViewData["Title"] = "Index";
}
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    
    <style>
body {font-family: Arial, Helvetica, sans-serif;}

/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  padding-top: 100px; /* Location of the box */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.modal-content {
  position: relative;
  background-color: #fefefe;
  margin: auto;
  padding: 0;
  border: 1px solid #888;
  width: 80%;
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
  -webkit-animation-name: animatetop;
  -webkit-animation-duration: 0.4s;
  animation-name: animatetop;
  animation-duration: 0.4s
}



/* The Close Button */
.close {
  color: white;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}

.modal-header {
  padding: 2px 16px;
  background-color: #888;
  color: white;

}

.modal-body {padding: 2px 16px;}

.modal-footer {
  padding: 2px 16px;
  background-color: #5cb85c;
  color: white;
}
.mybtn{
background-color: #212529;
}
.mybtn:hover{
    background-color: #324331;
}
.myreversebtn{
 background-color: #324331;
}
.myreversebtn:hover {
    background-color: #212529;
}
.subbtn{
 background-color: #A8A8A8;
}
        .subbtn:hover {
            background-color: #212529;
        }
    </style>


<link rel="stylesheet" href="~/lib/jquery-ui/jquery-ui.min.css" />

<h1>Kreator zależności</h1>
@if (ViewBag.Error != null)
{
    <p style="color: red">@ViewBag.Error</p>
}
<form method="post" id="formik" asp-action="addTest">

    <input hidden asp-for="@Model.SuperiorFieldId" />
    <input hidden value="@TempData["isDependency"]" id="myHiddenVar" />

    @for (var i = 0; i < Model.ActivationValues?.Count; i++)
    {
        if (Model.ActivationValues[i] != null)
        {
            <input hidden asp-for="@Model.ActivationValues[i]" />
        }
    }





    <br />

    <p id="info">
        Wybrany typ zależności: @Model.DependencyType <br />
        Wartość aktywująca: @Model.ActivationValue
    </p>

    <div hidden id="new">
        <p>

            <select hidden name="DependencyType" asp-for="@Model.DependencyType">
                <option selected="selected" value="FieldVisibly">Wartościowa</option>

            </select><br />
        </p>

        <p>
            <label for="@Model.ActivationValue">Wartość aktywująca zależność </label>
            <select asp-for="@Model.ActivationValue">
                <option selected disabled value="no">wybierz pole</option>
                @foreach (var x in Model.ActivationValues)
                {
                    <option value="@x">@x</option>
                }

            </select>
            @*<button id="createBtn" class="btn mybtn">Zatwierdz</button>*@
        </p>

    </div>
    <br />
    <button id="myBtn" class="mybtn btn">nowe pole </button>
    <table class="table table-striped" id="RelatedFieldsTable">
        <thead>
            <tr>
                <th scope="col">Nazwa pola</th>
                <th scope="col">Typ</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.RelatedFields != null)
            {
                @foreach (var item in Model.RelatedFields)
                {
                    <tr>
                        <td>@item?.Name</td>
                        <td>@item?.Type</td>
                        <td><a class="btn-danger" asp-action="DeleteFromDependency" asp-route-idField="@item.Id" asp-route-idDep="@Model.IdDependency"> usuń</a></td>
                    </tr>

                }
            }
        </tbody>
    </table>
    <br />
    <!-- Trigger/Open The Modal -->
    <!-- The Modal -->
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                @* <span class="close">&times;</span>*@
                <h3 style="color:black">Kreator nowego pola</h3>
            </div>
            <div class="modal-body">

                <label for="CurrentFieldName">Wybierz pola zależne</label>
                <input asp-for="@Model.CurrentFieldName" name="CurrentFieldName" />
                <label style="color:black" for="currentTypeToCreate">Wybierz typ:</label>
                <select asp-for="@Model.CurrentFieldType" class="form-control" name="CurrentFieldType" style="width:300px">
                    <option value="">Wybierz opcję</option>
                    <option value="text">Pole tekstowe</option>
                    <option value="checkbox">Checkbox</option>
                    <option value="select">Lista</option>
                    <option value="number">Numer</option>
                </select>
                <br />
                <div></div>
                <div id="numberValidation" hidden>
                    <input type="checkbox" id="enableValidationMin" value="min" style=" background-color:white; color:#66BB6A;" />
                    <label style="color:black">Minimalna wartość</label>
                    <input class="form-control" asp-for="@Model.CurrentFieldMin" id="inputMin" hidden />
                    <br />
                    <input type="checkbox" id="enableValidationMax" value="max" />
                    <label style="color:black">Maksymalna wartość</label>
                    <input class="form-control" asp-for="@Model.CurrentFieldMax" id="inputMax" hidden />
                    <br />
                    <input type="checkbox" id="enableValidationInteger" value="liczba całkowita" />
                    <input hidden id="inputForInteger" asp-for="@Model.CurrentFieldIsInteger" />
                    <label style="color:black">Liczba całkowita</label>

                    <br />
                </div>

                <div id="selectOptions" hidden>
                    <input type="button" id="addOptionsBtn" value="Dodaj opcje" style=" background-color:white; color:#66BB6A;font-size:20px;padding: 5px 15px; margin-bottom:5px; border-radius: 8px;position:center;" />
                    <div id="firstDiv">
                        <input style=" border-radius: 5px; width:300px; height:30px; " type="text" id="opt0" class="definedAnswer" />
                        <input id="optionsJsonID" hidden />
                    </div>
                </div>


                <button id="addNewField" style=" 
            font-size:20px;
            padding: 15px 35px;
            border-radius: 8px;
            position:center;" type="submit" asp-action="addTest" class="btn myreversebtn">
                    Stwórz
                </button> 
            </div>

        </div>

    </div>




    <br />
    <br />
    <button style="margin-top:30px;" asp-action="CreateDependency" id="createDep" class="subbtn btn">Stwórz zależność</button>

    @* Hidden fields *@
    <input asp-for="@Model.AllIndependentFieldsName" hidden />
    @for (var i = 0; i < Model.RelatedFields?.Count; i++)
    {
        if (Model.RelatedFields[i] != null)
        {
            <input hidden asp-for="@Model.RelatedFields[i].Id" />
            <input hidden asp-for="@Model.RelatedFields[i].Name" />
            <input hidden asp-for="@Model.RelatedFields[i].Type" />


        }
    }



    <input hidden value="@TempData["Field"]" id="myFieldName" />
    <input hidden asp-for="@Model.CurrentFieldAnswers" />
    @* Hidden fields *@
    <input hidden asp-for="@Model.IdDependency" />

</form>


<script>
    $(document).ready(function () {
        let sellect = document.querySelector("#ActivationValue")
        if (sellect.value === "no") { 
        let createBtn = document.querySelector("#createDep");
        createBtn.disabled = true;

        let modalBtn = document.querySelector("#myBtn");
        modalBtn.disabled = true;
    }
    })

    


</script>

<script>
    let sellect = document.querySelector("#ActivationValue")
    let fieldId = document.querySelector("#SuperiorFieldId").value;
    let fieldName = document.querySelector("#ActivationValue").value;
    

    sellect.addEventListener("change", functionHandleClick)

    function functionHandleClick(e) {
        e.preventDefault()
        let select = document.querySelector("#ActivationValue");
        let val = select.options[select.selectedIndex].value

         let createBtn = document.querySelector("#createDep");
        createBtn.disabled = false;

        let modalBtn = document.querySelector("#myBtn");
        modalBtn.disabled = false;

        window.location = '/DependencyCreator?id=' + fieldId + '&idDep=0&activation=' + val;
    }
</script>


<script>
    let button = document.querySelector("#addNewField");




    button.addEventListener("click", handleAddNewButton)

    function handleAddNewButton(e) {
        e.preventDefault();

        let inputs = document.querySelectorAll(".definedAnswer");
        let result="";
        inputs.forEach((input) => {
            result += input.value + ";"
        });
        let xd = document.querySelector("#CurrentFieldAnswers")
        xd.value = result;

        document.querySelector("#formik").submit();

        

    }


</script>

<script>
    let val = document.getElementById('myHiddenVar').value

    if (val == 0) {
        let niu = document.getElementById('new')
        let info = document.getElementById('info')

        info.setAttribute("hidden", "")
        niu.removeAttribute("hidden")
    }

    let field = document.getElementById('myFieldName').value

    if (field != null) {
        let input = document.querySelector("#SuperiorFieldName")
        input.value = field
    }

</script>

<script>

</script>



<script>
    let fieldName = sessionStorage.getItem("fieldName");
    sessionStorage.removeItem("fieldName")
    if (fieldName != null) {
        let input = document.querySelector("#SuperiorFieldName")
        input.value = fieldName
        input.setAttribute("readonly", "readonly");
    }
    let input = document.querySelector("#SuperiorFieldName")
    if (input.value != null) {
        input.setAttribute("readonly", "readonly");
    }
    let dep = document.querySelector("#CurrentFieldName");
    dep.value = "";

</script>

<script>
    let indexOfOptions = 1;
  //  let selectedAnswers = new Array();
    
  //  let newFieldName;
  //  let fieldType;
    

  //  let numMin = document.querySelector("#inputMin")
  //  let numMax = document.querySelector("#inputMax")
  //  let isInteger = document.querySelector("#inputForInteger")

  //  function clear() {
        
  //  }

  //  function updateFieldName(e) {
  //      newFieldName = e.target.value;
  //      console.log(e.target.value)

  //      let selectDiv = document.createElement("div");

  //     indexOfOptions++;
  //  }

    function handleDelete(e) {
        console.log(e.target)
    }
    
    function handleNewOption(e) {
        e.preventDefault(); 
        console.log("newOptionHandling")
        let parent = document.querySelector("#firstDiv")
        let selectDiv = document.createElement("div");
        let d = document.createElement("div")
        let inp = document.createElement("INPUT");
        inp.setAttribute("type", "text")
        inp.setAttribute("class", "definedAnswer")
        inp.setAttribute("id", "opt" + indexOfOptions);
        inp.style.borderRadius = "5px";
        inp.style.width = "300px"

        let inpBut = document.createElement("INPUT");
        inpBut.setAttribute("type", "button")
        inpBut.setAttribute("id", "uopt" + indexOfOptions);
        inpBut.setAttribute("value", "usun")
        inpBut.style.borderRadius = "8px";
        inpBut.style.backgroundColor = "white";
        //inpBut.style.width = "30px"
        inpBut.style.color = "#66BB6A"
        inpBut.style.fontSize = "20px"
        inpBut.style.padding = "5px 5px"
        inpBut.style.position = "center"
        inpBut.style.marginLeft = "5px"
        inpBut.textContent = "usuń"
        inpBut.addEventListener("click", handleDelete);
        // selectDiv.innerHTML = '<div ><input type="text" id="opt' + indexOfOptions + '"name="dyntxt" style=" border-radius: 5px; width:300px; height:30px; "/><input type="button" id=uopt"' + indexOfOptions + '"onclick="RemoveBtn(this)" value="Usuń" style=" background-color:white; color:#66BB6A;font-size:20px;padding: 5px 5px;border-radius: 8px;position:center;margin-left:5px"/></div>'
        d.appendChild(inp);
        d.appendChild(inpBut);
        selectDiv.appendChild(d)
        indexOfOptions++;
        parent.appendChild(selectDiv)
        

    }


  //  //let nameInput = document.querySelector("#currentNameToCreate");
    let fieldTypeInput = document.querySelector("#CurrentFieldType")
    let newSelectBtn = document.querySelector("#addOptionsBtn")
  //  let createButton = document.querySelector("#createField");

  //  //nameInput.addEventListener("change", updateFieldName)

  fieldTypeInput.addEventListener("change", updateFieldType)

    newSelectBtn.addEventListener("click", handleNewOption)

    function updateFieldType(e) {
        fieldType = e.target.value;
        
          if (fieldType == "number") {
                document.getElementById("numberValidation").hidden = false;
              
            } else {
                 document.getElementById("numberValidation").hidden = true;
            }
           if (fieldType == "select") {
           
                document.getElementById("selectOptions").hidden = false;
            }
            else {
                 document.getElementById("selectOptions").hidden = true;
            }
    }

     document.getElementById("enableValidationMin").addEventListener("change", function(){
        if (this.checked == true) document.getElementById("inputMin").hidden = false;
        else document.getElementById("inputMin").hidden = true;
    });

    document.getElementById("enableValidationMax").addEventListener("change", function(){
        if (this.checked == true) document.getElementById("inputMax").hidden = false;
        else document.getElementById("inputMax").hidden = true;
    });

    document.getElementById("enableValidationInteger").addEventListener("change", function () {
        if (this.checked == true) document.getElementById("inputForInteger").value = 100;
        else document.getElementById("inputForInteger").value = 0;
    });

    

  //  createButton.addEventListener("click", createField);
    
  //  //console.log(nameInput)


  //  function addNewField(e) {
  //      e.preventDefault();
        

  //  }

        // Get the modal
    var modal = document.getElementById("myModal");

    // Get the button that opens the modal
    var btn = document.getElementById("myBtn");

    // Get the <span> element that closes the modal
   // var span = document.getElementsByClassName("close")[0];

    // When the user clicks the button, open the modal 
    btn.onclick = function (e) {
    e.preventDefault();
        modal.style.display = "block";
    }

    // When the user clicks on <span> (x), close the modal
    //span.onclick = function() {
    //    modal.style.display = "none";
    //}

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
    if (event.target == modal) {
        modal.style.display = "none";
      }
    }

    //function createField(e) {
      
    //    console.log(newFieldName)
    //    console.log(fieldType)
    //    let jsonModel = {};
    //    jsonModel.name = newFieldName;
    //    jsonModel.type = fieldType;
        
        
        
    //    let min
    //    let max
    //    if (fieldType == "select") {
    //        let selectInps = document.querySelectorAll(".definedAnswer");
    //        jsonModel.selectAnswers = []
    //        selectInps.forEach((inp) => {
    //            console.log(inp.value)
    //            //selectedAnswers.push(inp.value)
    //            jsonModel.selectAnswers.push(inp.value);
    //        })
    //    }
    //    if (fieldType == "number") {
    //        console.log(numMin.value)
    //        console.log(numMax.value)
    //        console.log(isInteger.value)
    //        jsonModel.isInteger = 0;
    //        if (!(/^\s*$/).test(numMin.value)) {
    //            min = numMin.value
    //            jsonModel.min = parseInt(min);
    //        }
    //        if (!(/^\s*$/).test(numMax.value)) {
    //            max = numMax.value
    //            jsonModel.max = parseInt(max);
    //        }
    //        if (isInteger.value.includes("100")) {
    //            console.log("ha ha")
    //            jsonModel.isInteger = 1;
    //        }
    //    }
    //    let son = JSON.stringify(jsonModel)
    //    son = encodeURIComponent(son);
    //    window.location.href = 'FieldDependency/addTest/'+son;


    </script>

@*<script src="~/js/AutocompleteField.js"></script>*@
